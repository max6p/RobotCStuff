#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    ,               sensorLineFollower)
#pragma config(Sensor, in2,    centerLineFollower, sensorLineFollower)
#pragma config(Sensor, in3,    rightLineFollower, sensorLineFollower)
#pragma config(Sensor, in4,    gyro,           sensorGyro)
#pragma config(Sensor, in6,    armPot,         sensorPotentiometer)
#pragma config(Sensor, dgtl1,  leftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  ,               sensorQuadEncoder)
#pragma config(Sensor, dgtl10, rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, I2C_1,  rightIME,       sensorNone)
#pragma config(Sensor, I2C_2,  leftIME,        sensorNone)
#pragma config(Sensor, I2C_3,  armIME,         sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port2,           rightMotor,    tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, dgtl10)
#pragma config(Motor,  port3,           leftMotor,     tmotorVex393_MC29, openLoop, driveLeft, encoderPort, dgtl1)
#pragma config(Motor,  port6,           armMotor,      tmotorVex393_MC29, openLoop, encoderPort, I2C_3)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void forward(float rotation)
{

	while(SensorValue[leftEncoder] < rotation*360)
	{
		motor[rightMotor] = 63;
		motor[leftMotor] = 63;
	}
}

void resetEncoder()
{
	SensorValue[leftEncoder] = 0;SensorValue[rightEncoder] = 0;
}

void encoderTurnLeft(int degree)
{
	while(SensorValue[leftEncoder] > degree * -10){
		motor[leftMotor] = -63;
		motor[rightMotor] = 63;
	}
	stopAllMotors();}
	
	void encoderTurnRight(int degree)
{
	while(SensorValue[leftEncoder] < degree * 10){
		motor[leftMotor] = 63;
		motor[rightMotor] = -63;
	}
	stopAllMotors();}
	


task main()
{

	
	

 }
